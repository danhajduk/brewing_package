# Fermentation Monitoring Package

# Input numbers for manual adjustments and previous gravity reading
input_number:
  gravity_stable_threshold:
    name: Gravity Stability Threshold
    initial: 48
    min: 1
    max: 72
    step: 1
    unit_of_measurement: hours
    mode: box

  previous_gravity_reading:
    name: Previous Gravity Reading
    initial: 1.020
    min: 0.980
    max: 1.200
    step: 0.001
    unit_of_measurement: "SG"

  original_gravity:
    name: Original Gravity
    initial: 1.050
    min: 1.000
    max: 1.200
    step: 0.001
    unit_of_measurement: "SG"
    mode: box

# Input boolean to start fermentation
input_boolean:
  fermentation_started:
    name: Fermentation Started
    icon: mdi:play-circle

  report_to_brewersfriend:
    name: Report to BrewersFriend
    initial: off

# Timer for fermentation duration
input_datetime:
  fermentation_start_time:
    name: Fermentation Start Time
    has_date: true
    has_time: true

# Template Sensors
sensor:
  - platform: statistics
    name: "Average Fermentation Temperature"
    entity_id: sensor.ispindel001_temperature
    state_characteristic: mean
    sampling_size: 100
    max_age:
      minutes: 1440 # Track over the last 24 hours
    unique_id: sensor_average_fermentation_temperature

  - platform: statistics
    name: "Average Humidity"
    entity_id: sensor.kitchen_temperature_humidity
    state_characteristic: mean
    sampling_size: 100
    max_age:
      minutes: 1440 # Track over the last 24 hours
    unique_id: sensor_average_humidity

  - platform: template
    sensors:
      is_gravity_stable:
        friendly_name: "Is Gravity Stable?"
        value_template: >
          {% set current_reading = states('sensor.ispindel001_gravity') | float(0) | default(0) %}
          {% set previous_reading = states('input_number.previous_gravity_reading') | float(0) | default(0) %}
          {{ current_reading == previous_reading }}
        unique_id: sensor_is_gravity_stable

      abv:
        friendly_name: "Alcohol By Volume (ABV)"
        unit_of_measurement: "%"
        value_template: >
          {% set og = states('input_number.original_gravity') | float(0) | default(0) %}
          {% set fg = states('sensor.ispindel001_gravity') | float(0) | default(0) %}
          {% if fg > 0 and og > 0 %}
            {{ ((og - fg) * 131.25) | round(2) }}
          {% else %}
            "N/A"
          {% endif %}
        unique_id: sensor_abv

      is_fermentation_active:
        friendly_name: "Is Fermentation Active?"
        value_template: >
          {% set co2_level = states('sensor.fermentation_lid_bucket_fermentation_co2_sensor_1') | float(0) | default(0) %}
          {{ co2_level > 1000 }}  # Example threshold for CO2 level indicating active fermentation
        unique_id: sensor_is_fermentation_active

      brewersfriend_status:
        friendly_name: "BrewersFriend Data Status"
        value_template: "{{ states('input_text.brewersfriend_status') }}"
        unique_id: sensor_brewersfriend_status

      fermentation_duration:
        friendly_name: "Fermentation Duration"
        value_template: >
          {% if is_state('input_boolean.fermentation_started', 'on') %}
            {% set start_time = as_timestamp(states('input_datetime.fermentation_start_time')) %}
            {% set now_time = as_timestamp(utcnow()) %}
            {% set duration = (now_time - start_time) %}
            
            {% set days = duration // 86400 %}
            {% set hours = (duration % 86400) // 3600 %}
            {% set minutes = (duration % 3600) // 60 %}
            
            {% if days > 0 %}
              {{ days |int}}d {{ hours |int}}h {{ minutes |int}}m
            {% else %}
              {{ hours |int}}h {{ minutes |int}}m
            {% endif %}
          {% else %}
            Not Fermenting
          {% endif %}
        unique_id: sensor_fermentation_duration

      ispindel_battery_percentage:
        friendly_name: "iSpindel Battery Percentage"
        unit_of_measurement: "%"
        value_template: >
          {% set voltage = states('sensor.ispindel001_battery_voltage') | float(0) | default(0) %}
          {% set percentage = ((voltage - 3.0) / (4.305 - 3.0)) * 100 %}
          {{ percentage | round(0) }}
        unique_id: sensor_ispindel_battery_percentage

      gravity_trend:
        friendly_name: "Gravity Trend"
        unit_of_measurement: "SG/hour"
        value_template: >
          {% set current_gravity = states('sensor.ispindel001_gravity') | float(0) | default(0) %}
          {% set previous_gravity = states('input_number.previous_gravity_reading') | float(0) | default(0) %}
          {% set duration_hours = (utcnow().timestamp() - as_timestamp(states('input_datetime.fermentation_start_time'))) / 3600 %}
          {{ ((previous_gravity - current_gravity) / duration_hours) | round(4) if duration_hours > 0 else "N/A" }}
        unique_id: sensor_gravity_trend

      estimated_time_to_fg:
        friendly_name: "Estimated Time to Final Gravity"
        unit_of_measurement: "hours"
        value_template: >
          {% set current_gravity = states('sensor.ispindel001_gravity') | float(0) | default(0) %}
          {% set final_gravity = 1.010 %}
          {% set gravity_trend = states('sensor.gravity_trend') | float(0) | default(0) %}
          {% if gravity_trend > 0 %}
            {{ ((current_gravity - final_gravity) / gravity_trend * 24) | round(1) }}
          {% else %}
            "N/A"
          {% endif %}
        unique_id: sensor_estimated_time_to_fg

      fermentation_phase:
        friendly_name: "Fermentation Phase"
        value_template: >
          {% set co2_level = states('sensor.fermentation_lid_bucket_fermentation_co2_sensor_1') | float(0) | default(0) %}
          {% set current_gravity = states('sensor.ispindel001_gravity') | float(0) | default(0) %}
          {% set previous_gravity = states('input_number.previous_gravity_reading') | float(0) | default(0) %}
          {% set gravity_trend = (previous_gravity - current_gravity) %}
          {% set start_time = as_timestamp(states('input_datetime.fermentation_start_time')) %}
          {% set duration_hours = (utcnow().timestamp() - start_time) / 3600 %}

          {% if duration_hours < 6 and gravity_trend == 0 %}
            "Fermentation Not Yet Started"
          {% elif states('sensor.fermentation_lid_bucket_fermentation_co2_sensor_1') == 'unavailable' %}
            {% if current_gravity <= 1.010 and gravity_trend < 0.001 %}
              "Completed"
            {% elif gravity_trend > 0 %}
              "Active"
            {% else %}
              "Slow"
            {% endif %}
          {% else %}
            {% if co2_level > 1500 and gravity_trend > 0 %}
              "Active"
            {% elif current_gravity <= 1.010 and gravity_trend < 0.001 %}
              "Completed"
            {% elif gravity_trend < 0.001 %}
              "Slow"
            {% else %}
              "Unknown"
            {% endif %}
          {% endif %}
        unique_id: sensor_fermentation_phase

# Input Text for status
input_text:
  brewersfriend_status:
    name: BrewersFriend Data Status
    initial: "Not Sent"

automation:
  - alias: Notify High Fermentation Temperature
    trigger:
      platform: numeric_state
      entity_id: sensor.ispindel001_temperature
      above: 29 # Trigger when temperature exceeds 29°C
      for:
        minutes: 10 # Ensures temperature stays high for at least 10 minutes
    action:
      - service: notify.mobile_app_dans_iphone14
        data:
          message: "Warning: Fermentation temperature is above 29°C. Cooling may be needed."
    unique_id: automation_notify_high_fermentation_temperature

  - alias: Start Fermentation
    trigger:
      platform: state
      entity_id: input_boolean.fermentation_started
      to: "on"
    action:
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.fermentation_start_time
        data:
          timestamp: "{{ now().timestamp() }}"
    unique_id: automation_start_fermentation

  - alias: Stop Fermentation
    trigger:
      platform: state
      entity_id: input_boolean.fermentation_started
      to: "off"
    action:
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.fermentation_start_time
        data:
          timestamp: "0"
    unique_id: automation_stop_fermentation

  - alias: Update Previous Gravity Reading
    trigger:
      platform: time_pattern
      minutes: "/30"
    action:
      service: input_number.set_value
      target:
        entity_id: input_number.previous_gravity_reading
      data:
        value: "{{ states('sensor.ispindel001_gravity') | float(0) | default(0) }}"
    unique_id: automation_update_previous_gravity_reading

  - alias: Notify When Fermentation Complete
    trigger:
      platform: state
      entity_id: sensor.is_gravity_stable
      to: "True"
      for:
        hours: "{{ states('input_number.gravity_stable_threshold') | int }}"
    condition:
      condition: state
      entity_id: sensor.is_fermentation_active
      state: "False"
    action:
      - service: notify.mobile_app_dans_iphone14
        data:
          message: "Fermentation is complete. Gravity readings have been stable for {{ states('input_number.gravity_stable_threshold') }} hours and CO2 levels indicate fermentation is inactive."
    unique_id: automation_notify_when_fermentation_complete

  - alias: Report Data to BrewersFriend
    trigger:
      platform: time_pattern
      minutes: "/15"
    condition:
      - condition: state
        entity_id: input_boolean.report_to_brewersfriend
        state: "on"
    action:
      - service: script.report_to_brewersfriend
    unique_id: automation_report_data_to_brewersfriend

  - alias: Notify When iSpindel Battery is Low
    trigger:
      platform: numeric_state
      entity_id: sensor.ispindel001_battery_voltage
      below: 3.3
    action:
      - service: notify.mobile_app_dans_iphone14
        data:
          message: "Warning: iSpindel battery voltage is low ({{ states('sensor.ispindel001_battery_voltage') | float(0) }}V). Please recharge soon."
    unique_id: automation_notify_when_ispindel_battery_is_low

  - alias: Notify When Error Sending Data to BrewersFriend
    trigger:
      platform: state
      entity_id: input_text.brewersfriend_status
      to: "Failed to Send"
    action:
      - service: notify.mobile_app_dans_iphone14
        data:
          message: "Error: Failed to send data to BrewersFriend."
    unique_id: automation_notify_when_error_sending_data_to_brewersfriend

script:
  report_to_brewersfriend:
    sequence:
      - service: input_text.set_value
        target:
          entity_id: input_text.brewersfriend_status
        data:
          value: Sending data to BrewersFriend.com
      - service: rest_command.report_to_brewersfriend
        response_variable: brewersfriend_response
      - if: "{{ brewersfriend_response.status == 200 }}"
        then:
          - service: input_text.set_value
            target:
              entity_id: input_text.brewersfriend_status
            data:
              value: "Successfully Sent"
        else:
          - service: input_text.set_value
            target:
              entity_id: input_text.brewersfriend_status
            data:
              value: "Failed to Send"
    unique_id: script_report_to_brewersfriend

rest_command:
  report_to_brewersfriend:
    url: "https://log.brewersfriend.com/stream/95c241ab33c0b51e0307ddae67ce602040d12ea5"
    method: POST
    headers:
      Content-Type: "application/json"
    payload: >
      {
        "name": "Dans Brew",
        "og": "{{ states('input_number.original_gravity') | float(0) | default(0) }}",  
        "temp": "{{ states('sensor.ispindel001_temperature') | float(0) | default(0) }}",
        "ambient": "{{ states('sensor.kitchen_temp_in_c') | float(0) | default(0) }}",
        "temp_unit": "C",
        "gravity_unit": "G",
        "gravity": "{{ states('sensor.ispindel001_gravity') | float(0) | default(0) }}",
        "battery": "{{ states('sensor.ispindel001_battery_voltage') | float(0) | default(0) }}",
        "co2": "{{ states('sensor.fermentation_lid_bucket_fermentation_co2_sensor_1') | float(0) | default(0) }}"
      }
